{"version":3,"sources":["components/MovieCard/MovieCard.jsx","components/MovieList/MovieList.jsx","styles/images/televisor.png","components/api.js","App.jsx","reportWebVitals.js","index.js"],"names":["MovieCard","title","year","imgUrl","episode","openInNewTab","className","onClick","type","src","alt","MovieList","preparedShows","this","props","map","item","_embedded","show","name","premiered","split","join","image","medium","season","number","window","open","original","id","PureComponent","defaultProps","PropTypes","null","request","url","fetch","then","response","ok","Error","status","statusText","json","endpoint","a","App","state","selectedDay","isSelected","shows","onDaySelected","selected","setState","Date","goBack","getApi","result","filter","airdate","toLocaleString","slice","reverse","month","day","televisor","onClickDay","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41f635fd.chunk.js","sourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n\n// export const MovieCard = ({\n//   title,\n//   year,\n//   imgUrl,\n// }) => (\n//   <>\n//     <div className=\"card\">\n//       <div>\n//         <figure>\n//           <img\n//             className=\"card__img\"\n//             src={imgUrl}\n//             alt=\"Film logo\"\n//           />\n//         </figure>\n//       </div>\n\n//       <div className=\"card__description description\">\n//         <h1 className=\"description__title\">{title}</h1>\n//         <p className=\"description__year\">{year}</p>\n//       </div>\n//     </div>\n//   </>\n// );\n\n// MovieCard.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   year: PropTypes.string.isRequired,\n//   imgUrl: PropTypes.string.isRequired,\n// };\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// const ;\n\nexport const MovieCard = ({\n  title,\n  year,\n  imgUrl,\n  episode,\n  openInNewTab,\n}) => (\n  <>\n    <div className=\"card\">\n      <div>\n        <button\n          onClick={openInNewTab}\n          type=\"button\"\n          className=\"button__link\"\n        >\n          <img\n            className=\"card__img\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </button>\n      </div>\n\n      <div className=\"card__description description\">\n        <h1 className=\"description__title\">{title}</h1>\n        <p className=\"description__year\">{year}</p>\n        <div className=\"description__episode\">{episode}</div>\n      </div>\n    </div>\n  </>\n);\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  episode: PropTypes.string.isRequired,\n  openInNewTab: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-underscore-dangle */\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard/MovieCard';\n\nexport class MovieList extends PureComponent {\n  render() {\n    const { preparedShows } = this.props;\n\n    return (\n      <div className=\"content\">\n        <ul className=\"content__list list\">\n          {preparedShows.map(item => (\n            <li key={item.id} className=\"list__item\">\n              <MovieCard\n                title={item._embedded.show.name}\n                year={(item._embedded.show.premiered)\n                  .split('', 4)\n                  .join('')}\n                imgUrl={\n                  item._embedded.show.image !== null\n                    ? item._embedded.show.image.medium\n                    : ''\n                }\n                episode={`Сезон: ${item.season} Эпизод: ${item.number}`}\n                openInNewTab={\n                  item._embedded.show.image !== null\n                    // eslint-disable-next-line\n                    ? () => window.open(\n                      item._embedded.show.image.original,\n                      '_blank', 'noopener, noreferrer',\n                    )\n                    // eslint-disable-next-line\n                    : () =>  window.open(`https://google.com/search?q=${item._embedded.show.name} series pictures`,\n                      '_blank', 'noopener, noreferrer')\n                }\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  preparedShows: PropTypes.arrayOf,\n};\n\nMovieList.defaultProps = {\n  preparedShows: PropTypes.null,\n};\n","export default __webpack_public_path__ + \"static/media/televisor.3bca90b2.png\";","const BASE_URL = 'http://api.tvmaze.com';\n\nexport function request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport async function getApi(endpoint) {\n  const show = await request(endpoint);\n\n  return show;\n}\n","import React from 'react';\nimport Calendar from 'react-calendar';\nimport { MovieList } from './components/MovieList/MovieList';\n\nimport televisor from './styles/images/televisor.png';\n\nimport { getApi } from './components/api';\n\nimport './App.css';\n// eslint-disable-next-line\nimport 'react-calendar/dist/Calendar.css';\n\nclass App extends React.Component {\n  state = {\n    selectedDay: '',\n    isSelected: false,\n    shows: [],\n  };\n\n  componentDidMount() {\n    getApi('/schedule/full').then(result => this.setState({ shows: result }));\n  }\n\n  onDaySelected = (selected) => {\n    this.setState({\n      selectedDay: new Date(selected),\n      isSelected: true,\n    });\n  }\n\n  goBack = () => {\n    this.setState({\n      selectedDay: '',\n      isSelected: false,\n    });\n  }\n\n  render() {\n    let preparedShows = [];\n    const {\n      selectedDay,\n      isSelected,\n      shows,\n    } = this.state;\n    const { onDaySelected } = this;\n\n    if (isSelected) {\n      preparedShows = shows.filter(show => show.airdate === selectedDay\n        .toLocaleString()\n        .slice(0, -10)\n        .split('.')\n        .reverse()\n        .join('-'));\n    }\n\n    return (\n      <>\n        <header className=\"container header\">\n          <div className=\"header__title\">\n            <h1 className=\"header__title header__title--text\">SUPER FILM</h1>\n          </div>\n        </header>\n        {!isSelected\n          ? (\n            <>\n              <section className=\"block\">\n                <div className=\"block__start start\">\n                  <div>\n                    <img\n                      className=\"start__img\"\n                      src={televisor}\n                      alt=\"tv\"\n                    />\n                  </div>\n                  <p className=\"start__text\">\n                    Для получения списка сериалов, пожалуйста,\n                    выберите необходимый месяц и день\n                  </p>\n                </div>\n              </section>\n\n              <Calendar onClickDay={onDaySelected} />\n            </>\n          )\n          : (\n            <>\n              {/* eslint-disable-next-line */}\n              <div className=\"content__date date\">\n                <h1 className=\"date__text\">\n                  {selectedDay.toLocaleString('ru', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                  }).slice(0, -3)}\n                </h1>\n              </div>\n              <button\n                type=\"button\"\n                onClick={this.goBack}\n                className=\"header__button button\"\n              />\n              <div className=\"content\">\n                <MovieList preparedShows={preparedShows} />\n              </div>\n            </>\n          )\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}