{"version":3,"sources":["components/MovieCard/MovieCard.jsx","components/MovieList/MovieList.jsx","styles/images/televisor.png","App.jsx","reportWebVitals.js","index.js"],"names":["MovieCard","title","year","imgUrl","className","src","alt","MovieList","state","this","props","preparedShows","map","item","_embedded","show","name","premiered","split","join","image","medium","episode","season","number","openInNewTab","window","open","original","id","PureComponent","App","selectedDay","isSelected","onDaySelected","selected","setState","Date","goBack","toLocaleString","month","day","slice","type","onClick","televisor","onClickDay","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAGaA,EAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MACAC,EAFuB,EAEvBA,KACAC,EAHuB,EAGvBA,OAHuB,OAKvB,mCACE,sBAAKC,UAAU,OAAf,UACE,8BACE,iCACE,qBACEA,UAAU,YACVC,IAAKF,EACLG,IAAI,kBAKV,sBAAKF,UAAU,gCAAf,UACE,oBAAIA,UAAU,qBAAd,SAAoCH,IACpC,mBAAGG,UAAU,oBAAb,SAAkCF,aChB7BK,EAAb,4MACEC,MAAQ,GADV,uDAKY,IAAD,EACwBC,KAAKC,MAA5BC,qBADD,MACiB,GADjB,EAGP,OACE,qBAAKP,UAAU,UAAf,SACE,oBAAIA,UAAU,qBAAd,SACGO,EAAcC,KAAI,SAAAC,GAAI,OACrB,oBAAkBT,UAAU,aAA5B,SACE,cAAC,EAAD,CACEH,MAAOY,EAAKC,UAAUC,KAAKC,KAC3Bd,KAAOW,EAAKC,UAAUC,KAAKE,UACxBC,MAAM,GAAI,GACVC,KAAK,IACRhB,OACgC,OAA9BU,EAAKC,UAAUC,KAAKK,MAChBP,EAAKC,UAAUC,KAAKK,MAAMC,OAC1B,GAENC,QAAO,0CAAYT,EAAKU,OAAjB,kDAAmCV,EAAKW,QAC/CC,aACgC,OAA9BZ,EAAKC,UAAUC,KAAKK,MAEhB,kBAAMM,OAAOC,KACbd,EAAKC,UAAUC,KAAKK,MAAMQ,SAC1B,SAAU,yBAGV,kBAAOF,OAAOC,KAAP,sCAA2Cd,EAAKC,UAAUC,KAAKC,KAA/D,oBACP,SAAU,4BArBXH,EAAKgB,eAZ1B,GAA+BC,iBCNhB,MAA0B,sCC0F1BC,G,wNAhFbvB,MAAQ,CACNwB,YAAa,KACbC,YAAY,G,EAGdC,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZJ,YAAa,IAAIK,KAAKF,GACtBF,YAAY,K,EAIhBK,OAAS,WACP,EAAKF,SAAS,CACZJ,YAAa,KACbC,YAAY,K,uDAIN,IAAD,EAC6BxB,KAAKD,MAAjCwB,EADD,EACCA,YAAaC,EADd,EACcA,WACbC,EAAkBzB,KAAlByB,cAGR,OACE,qCACE,wBAAQ9B,UAAU,mBAAlB,SACE,qBAAKA,UAAU,gBAAf,SACE,oBAAIA,UAAU,oCAAd,4BAGF6B,EAwBE,qCACE,qBAAK7B,UAAU,qBAAf,SACE,oBAAIA,UAAU,aAAd,SACG4B,EAAYO,eAAe,KAAM,CAChCrC,KAAM,UACNsC,MAAO,OACPC,IAAK,YACJC,MAAM,GAAI,OAIjB,wBACEC,KAAK,SACLC,QAASnC,KAAK6B,OACdlC,UAAU,0BAEZ,cAAC,EAAD,OAtCF,qCACE,yBAASA,UAAU,QAAnB,SACE,sBAAKA,UAAU,qBAAf,UACE,8BACE,qBACEA,UAAU,aACVC,IAAKwC,EACLvC,IAAI,SAGR,oBAAGF,UAAU,cAAb,6KAEG,IAFH,2PAQJ,cAAC,IAAD,CAAU0C,WAAYZ,c,GApDlBa,IAAMC,YCGTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b96cd75.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  year,\n  imgUrl,\n}) => (\n  <>\n    <div className=\"card\">\n      <div>\n        <figure>\n          <img\n            className=\"card__img\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n\n      <div className=\"card__description description\">\n        <h1 className=\"description__title\">{title}</h1>\n        <p className=\"description__year\">{year}</p>\n      </div>\n    </div>\n  </>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n};\n","/* eslint-disable no-underscore-dangle */\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard/MovieCard';\n\nexport class MovieList extends PureComponent {\n  state = {\n\n  }\n\n  render() {\n    const { preparedShows = [] } = this.props;\n\n    return (\n      <div className=\"content\">\n        <ul className=\"content__list list\">\n          {preparedShows.map(item => (\n            <li key={item.id} className=\"list__item\">\n              <MovieCard\n                title={item._embedded.show.name}\n                year={(item._embedded.show.premiered)\n                  .split('', 4)\n                  .join('')}\n                imgUrl={\n                  item._embedded.show.image !== null\n                    ? item._embedded.show.image.medium\n                    : ''\n                }\n                episode={`Сезон: ${item.season} Эпизод: ${item.number}`}\n                openInNewTab={\n                  item._embedded.show.image !== null\n                    // eslint-disable-next-line\n                    ? () => window.open(\n                      item._embedded.show.image.original,\n                      '_blank', 'noopener, noreferrer',\n                    )\n                    // eslint-disable-next-line\n                    : () =>  window.open(`https://google.com/search?q=${item._embedded.show.name} series pictures`,\n                      '_blank', 'noopener, noreferrer')\n                }\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  /* eslint-disable-next-line */\n  preparedShows: PropTypes.array.isRequired,\n};\n","export default __webpack_public_path__ + \"static/media/televisor.3bca90b2.png\";","import React from 'react';\nimport Calendar from 'react-calendar';\nimport { MovieList } from './components/MovieList/MovieList';\n\nimport televisor from './styles/images/televisor.png';\n\nimport './App.css';\nimport 'react-calendar/dist/Calendar.css';\n\nclass App extends React.Component {\n  state = {\n    selectedDay: null,\n    isSelected: false,\n  };\n\n  onDaySelected = (selected) => {\n    this.setState({\n      selectedDay: new Date(selected),\n      isSelected: true,\n    });\n  }\n\n  goBack = () => {\n    this.setState({\n      selectedDay: null,\n      isSelected: false,\n    });\n  }\n\n  render() {\n    const { selectedDay, isSelected } = this.state;\n    const { onDaySelected } = this;\n    // const filteredShows = shows.filter(show => show.airdate === selectedDay);\n\n    return (\n      <>\n        <header className=\"container header\">\n          <div className=\"header__title\">\n            <h1 className=\"header__title header__title--text\">SUPER FILM</h1>\n          </div>\n        </header>\n        {!isSelected\n          ? (\n            <>\n              <section className=\"block\">\n                <div className=\"block__start start\">\n                  <div>\n                    <img\n                      className=\"start__img\"\n                      src={televisor}\n                      alt=\"tv\"\n                    />\n                  </div>\n                  <p className=\"start__text\">\n                    Для получения списка сериалов,\n                    {' '}\n                    пожалуйста, выберите необходимый месяц и день\n                  </p>\n                </div>\n              </section>\n\n              <Calendar onClickDay={onDaySelected} />\n            </>\n          )\n          : (\n            <>\n              <div className=\"content__date date\">\n                <h1 className=\"date__text\">\n                  {selectedDay.toLocaleString('ru', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                  }).slice(0, -3)}\n                </h1>\n              </div>\n\n              <button\n                type=\"button\"\n                onClick={this.goBack}\n                className=\"header__button button\"\n              />\n              <MovieList />\n            </>\n          )\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}